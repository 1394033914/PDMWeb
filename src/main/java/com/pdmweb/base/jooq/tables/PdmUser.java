/*
 * This file is generated by jOOQ.
 */
package com.pdmweb.base.jooq.tables;


import com.pdmweb.base.jooq.DefaultSchema;
import com.pdmweb.base.jooq.Keys;
import com.pdmweb.base.jooq.tables.records.PdmUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PdmUser extends TableImpl<PdmUserRecord> {

    private static final long serialVersionUID = 332019893;

    /**
     * The reference instance of <code>pdm_user</code>
     */
    public static final PdmUser PDM_USER = new PdmUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PdmUserRecord> getRecordType() {
        return PdmUserRecord.class;
    }

    /**
     * The column <code>pdm_user.user_id</code>.
     */
    public final TableField<PdmUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pdm_user.user_name</code>.
     */
    public final TableField<PdmUserRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pdm_user.pass_word</code>.
     */
    public final TableField<PdmUserRecord, String> PASS_WORD = createField(DSL.name("pass_word"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>pdm_user</code> table reference
     */
    public PdmUser() {
        this(DSL.name("pdm_user"), null);
    }

    /**
     * Create an aliased <code>pdm_user</code> table reference
     */
    public PdmUser(String alias) {
        this(DSL.name(alias), PDM_USER);
    }

    /**
     * Create an aliased <code>pdm_user</code> table reference
     */
    public PdmUser(Name alias) {
        this(alias, PDM_USER);
    }

    private PdmUser(Name alias, Table<PdmUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PdmUser(Name alias, Table<PdmUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PdmUser(Table<O> child, ForeignKey<O, PdmUserRecord> key) {
        super(child, key, PDM_USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PdmUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PDM_USER;
    }

    @Override
    public UniqueKey<PdmUserRecord> getPrimaryKey() {
        return Keys.PK_PDM_USER;
    }

    @Override
    public List<UniqueKey<PdmUserRecord>> getKeys() {
        return Arrays.<UniqueKey<PdmUserRecord>>asList(Keys.PK_PDM_USER);
    }

    @Override
    public PdmUser as(String alias) {
        return new PdmUser(DSL.name(alias), this);
    }

    @Override
    public PdmUser as(Name alias) {
        return new PdmUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PdmUser rename(String name) {
        return new PdmUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PdmUser rename(Name name) {
        return new PdmUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
